CS 380D distributed system project 1

Qi Huang, qh2466, qhuang
Tong Gao
Xiaoyang Shen, xs3484, xyshen

*************************
1. Implementation Details
*************************

This is a single-thread implementation of Chandy-Lampart algorithm in Python3. 
We model channels as deque accessible by both receivers and senders of any specific 
channel. We model Master, Observer and (Member) Nodes as instances of their respective 
classes. Master orders the observer and nodes by calling their methods directly, but 
the observer and nodes only use their connecting channels for communication about the 
data in transaction, state initialization, propogation and reporting stage of the 
distributed snapshot algorithm.

Per discussion with the professor in the office hour, when master node notify member 
node to send/recv messages, we use MemberNode.send() or MmeberNode.recv() due to the 
sigle-thread nature of this implementation.


*******************
2. Protocal Details
*******************
The Master, Observer and (Member) Nodes are modeled by different classes in Python, 
which have their own stored data and methods. Observer and Nodes are isolated from 
each other, communicating by sending messages through channels only. Master calls the
methods of Observer and Nodes directly to ensure blocking as required in the document.

Master has methods for each of the API commands specified in the document. In each method,
Master either initializes instances of Observer and Nodes, or calls the corresponding 
methods of these instances. Most of the methods are commented in the code.

****************
3. Tests Details
****************
\TODO Tong Gao


*********************
4. Usage Instructions
*********************

The system assumes that the user has Python3 executable located at /usr/bin/python.
No extra packages are required.

1) put all the test commands in a txt file TEST.txt, each command separated by newline

2) ./master TEST.txt
